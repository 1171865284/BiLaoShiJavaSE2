集合的由来：
	对象用于封装特有数据，对象多了需要存储，如果对象的个数不确定。
	就使用集合容器进行存储。
	
集合特点：
1.用于存储对象的容器
2.集合长度是可变的。
3.集合中不可以存储基本数据类型值。
(其实这就是集合和数组的区别)

集合容器因为内部的数据结构不同，有多种具体容器。
不断的向上抽取，就形成了集合框架。

框架的顶层Collection接口:

Collection的常见方法:

1.添加。
	boolean add(Object obj);
	boolean addAll(Collection coll);
	
2.删除。
	boolean remove(Object obj);
	boolean removeAll(Collection coll);
	void clear();

3.判断。
	boolean contains(Object obj);
	boolean contains(collection coll);
	boolean isEmpty();判断集合是否有元素。
	
4.获取。
	int size();
	iterator.iterator();取出元素的方式:迭代器。
	该对象必须依赖于具体容器，因为每一个容器的数据结构都不同。
	对于使用容器者而言，具体的实现不重要，只要通过容器获取到该实现的迭代器对象即可。
	也就是iterator方法
	
	Iterator接口就是对所有的Collection容器进行元素取出的公共接口。

5.其他:
	boolean retainAll(Collection coll);取交集。
	Object{}	toArray90;将几个转成数组	
===============================================================
===============================================================
Collection
	|---list:有序(存入和取出的顺序一致),元素都有索引(角标),元素可以重复。
	|---set:元素不能重复,无序。
	
List:特有常见方法：有一个共性特点就是都可以操作角标。

1.添加
	void add(index, element);
	void add(index, collection);

2.删除
	Object remove(index);
	
3.修改
	Object set(index, element);
	
4.获取
	Object get(index);
	int indexOf(object);
	int lastIndexOf(object);
	List subList(from, to);
	
list集合是可以完成对集合的增删改查.

List:
	|--Vector:内部是数组数据结构，是同步的。增删，查询都很慢！
	|--ArrayList:内部是数组数据结构，是不同步的。替代了Vector，查询的速度快。
	连续的空间，所以比较快
	|--LinkedList:内部链接列表数据结构，是不同步的。增删元素的速度非常快。
	因为不连续所以比较慢
	
LinkedList:
	
	addFirst();
	addLast();
	
	getFirst();//获取但不移除,如果链表为空,抛出NoSuchElementException
	getLast();
	jdk1.6
	peekFirst();//获取大不移除,如果链表为空,返回Null.
	peekLast
	
	removeFirst();//获取但不移除,如果链表为空,抛出NoSuchElementException
	removeLast();
	jdk1.6
	pollFirst();//获取大不移除,如果链表为空,返回Null.
	pollLast();
=====================================================================
=====================================================================
=====================================================================
Set:元素不可以重复，无序。
	Set接口中的方法和collection一致。
	|---HashSet:内部数据节后是哈希表，是不同步的。
		如何保证该集合的元素唯一性呢？
		是通过对象的hashCode和equals方法来完成对象的唯一性的。
		如果对象的hashCode值不同，那么不用判断equals方法，就直接存储到哈希表中。
		如果对象的hashCode值相同，那么再次判断对象的equals方法是否为true。
		如果truw，是为相同元素，不存。如果为false，那么视为不同元素，就进行存储。
		
		记住：如果元素要存储到HashSet集合中，必须副高hashCode方法和equals方法。
		一般情况下，如果的定义的类会长生很多对象，比如人，学生，书通常都需要覆盖equals,
		hashCode方法
		建立对象判断是否相同的依据。
	
	|---TreeSet: 可以对Set集合中的元素进行排序。是不同步的。
					判断元素唯一性的方式：就是根据比较方法的返回结果是否是0，是0，就是相同元素，不存在。
					
					TreeSet对元素进行排序的方式一：
					让元素自身具备表功能，元素就需要实现Comparable接口。覆盖compareTo方法
					
					如果不要按照对象中具备的自然顺序进行排序。如果对象中不具备自然顺序。
					这个适合怎么办？
					可以使用TreeSet集合的第二种排序方式二：
					让集合自身具备比较功能，定义一个类实现Comparator接口，覆盖compare方法
					将该类对象作为参数传递给TreeSet集合的构造函数。
	
哈希表确定袁术是否相同
1.判断的是两个元素的哈希值是否相同。
	如果相同，在判断两个对象的内容是否相同。
	
2.判断哈希值相同，其实判断的是对象的hashCode的方法，判断内容相同。用的是equals方法

注意：吐过哈希值不同，是不需要判断equals.	
